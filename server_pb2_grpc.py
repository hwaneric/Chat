# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import server_pb2 as server__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in server_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ServerStub(object):
    """package server;

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Signup = channel.unary_unary(
                '/Server/Signup',
                request_serializer=server__pb2.UserAuthRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/Server/Login',
                request_serializer=server__pb2.UserAuthRequest.SerializeToString,
                response_deserializer=server__pb2.UserLoginResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/Server/Logout',
                request_serializer=server__pb2.UserLogoutRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.ListUsernames = channel.unary_unary(
                '/Server/ListUsernames',
                request_serializer=server__pb2.ListUsernamesRequest.SerializeToString,
                response_deserializer=server__pb2.ListUsernamesResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/Server/SendMessage',
                request_serializer=server__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.RegisterClient = channel.unary_unary(
                '/Server/RegisterClient',
                request_serializer=server__pb2.RegisterClientRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.ReadMessages = channel.unary_unary(
                '/Server/ReadMessages',
                request_serializer=server__pb2.ReadMessagesRequest.SerializeToString,
                response_deserializer=server__pb2.ReadMessageResponse.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/Server/DeleteAccount',
                request_serializer=server__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.DeleteMessage = channel.unary_unary(
                '/Server/DeleteMessage',
                request_serializer=server__pb2.DeleteMessageRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.FetchSentMessages = channel.unary_unary(
                '/Server/FetchSentMessages',
                request_serializer=server__pb2.FetchSentMessagesRequest.SerializeToString,
                response_deserializer=server__pb2.FetchSentMessagesResponse.FromString,
                _registered_method=True)


class ServerServicer(object):
    """package server;

    """

    def Signup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsernames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchSentMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Signup': grpc.unary_unary_rpc_method_handler(
                    servicer.Signup,
                    request_deserializer=server__pb2.UserAuthRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=server__pb2.UserAuthRequest.FromString,
                    response_serializer=server__pb2.UserLoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=server__pb2.UserLogoutRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'ListUsernames': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsernames,
                    request_deserializer=server__pb2.ListUsernamesRequest.FromString,
                    response_serializer=server__pb2.ListUsernamesResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=server__pb2.SendMessageRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=server__pb2.RegisterClientRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'ReadMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadMessages,
                    request_deserializer=server__pb2.ReadMessagesRequest.FromString,
                    response_serializer=server__pb2.ReadMessageResponse.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=server__pb2.DeleteAccountRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'DeleteMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessage,
                    request_deserializer=server__pb2.DeleteMessageRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'FetchSentMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchSentMessages,
                    request_deserializer=server__pb2.FetchSentMessagesRequest.FromString,
                    response_serializer=server__pb2.FetchSentMessagesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Server', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """package server;

    """

    @staticmethod
    def Signup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/Signup',
            server__pb2.UserAuthRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/Login',
            server__pb2.UserAuthRequest.SerializeToString,
            server__pb2.UserLoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/Logout',
            server__pb2.UserLogoutRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsernames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/ListUsernames',
            server__pb2.ListUsernamesRequest.SerializeToString,
            server__pb2.ListUsernamesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/SendMessage',
            server__pb2.SendMessageRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/RegisterClient',
            server__pb2.RegisterClientRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/ReadMessages',
            server__pb2.ReadMessagesRequest.SerializeToString,
            server__pb2.ReadMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/DeleteAccount',
            server__pb2.DeleteAccountRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/DeleteMessage',
            server__pb2.DeleteMessageRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchSentMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Server/FetchSentMessages',
            server__pb2.FetchSentMessagesRequest.SerializeToString,
            server__pb2.FetchSentMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
